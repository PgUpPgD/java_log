<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!--
        日志输出格式：
            %-5level  级别从左显示5个字符宽度
            %d{yyyy-MM-dd HH:mm:ss.SSS}日期
            %c类的完整名称
            %M为method
            %L为行号
            %thread线程名称
            %m或者%msg为信息
            %n换行
        -->
    <!--  配置集中管理属性  可以直接调用该value值  格式：${name}-->
    <!-- 彩色日志格式 -->
    <property name="log.pattern"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} [%line] %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--  定义日志文件保存路径属性  -->
    <property name="log.log_dir" value="logs/"/>
    <!-- 日志最大的历史 30天 -->
    <property name="log.maxHistory" value="3"/>
    <property name="log.level" value="debug"/>
    <property name="log.maxSize" value="1MB" />

    <!--
        Appender: 设置日志信息的去向,常用的有以下几个
        ch.qos.logback.core.ConsoleAppender (控制台)
        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定大小的时候产生一个新文件)
        ch.qos.logback.core.FileAppender (文件)
    -->
    <!--  控制台 ConsoleAppender -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--输出流对象 默认 System.out 改为 System.err-->
        <target>System.out</target>
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--  使用下面这个需要在 application.properties 中选择 spring.profiles.active=dev 指定的格式，不然启动报错      -->
        <!--            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
        <!--                <springProfile name="dev">-->
        <!--                    <pattern>${log.pattern}</pattern>-->
        <!--                </springProfile>-->
        <!--                <springProfile name="pro">-->
        <!--                    <pattern>[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c [%thread] %msg%n</pattern>-->
        <!--                </springProfile>-->
        <!--            </encoder>-->
    </appender>

    <!--  文件 FileAppender -->
    <appender name="file" class="ch.qos.logback.core.FileAppender">
        <!-- 日志文件保存路径 -->
        <file>${log.log_dir}/logback.log</file>
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--  html格式文件输出 FileAppender -->
    <appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
        <!-- 日志文件保存路径 -->
        <file>${log.log_dir}/logback.html</file>
        <!--html日志格式配置-->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%thread%msg</pattern>
            </layout>
        </encoder>
    </appender>

    <!--  日志拆分和归档压缩 RollingFileAppender -->
    <appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志格式配置-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--日志输出路径-->
        <file>${log.log_dir}/roll_logback.log</file>
        <!--指定日志文件拆分和压缩规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--通过指定压缩文件名称，来确定分割文件方式-->
            <fileNamePattern>${log.log_dir}/roll_logback.%d{yyyy-MM-dd-HH-mm}.log%i.gz</fileNamePattern>
            <!--文件拆分大小-->
            <maxFileSize>${log.maxSize}</maxFileSize>
            <!--
                保留2个文件  意思是以 fileNamePattern 设置的最小的时间粒度为基准保留，
                如上是mm分钟，则除了当前的现在时间，最多保留历史分钟2个粒度
                例：现在11:29分，除了29分的日志，在保留28、27分的日志
            -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!-- ThresholdFilter 过滤掉所有低于INFO级别的日志。-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>INFO</level>-->
<!--        </filter>-->
        <!--  LevelFilter 将过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉，只打印INFO      -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="pay_flow" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.log_dir}/pay_flow.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.log_dir}/pay_flow.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--  EvaluatorFilter 布尔值表达式返回true就表示符合过滤条件     -->
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>
                    <!--  过滤掉所有日志消息中 logger对象不匹配pay_flow 的日志-->
<!--                    return logger.equals("pay_flow");-->
                    <!--  过滤掉所有日志消息中不包含“billing”字符串的日志-->
                    return message.contains("billing");
                </expression>
            </evaluator>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--异步日志 -->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <!--调用输出规则        -->
        <appender-ref ref="rollFile"/>
    </appender>

    <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <loger>仅有一个name属性，一个可选的level和一个可选的addtivity（添加）属性
        name:
            用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
            用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和OFF
            如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:
            是否向上级loger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
    <!--  logger：日志记录器
        <logger>元素，但是它是根logger。默认debug
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和 OFF，
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
    -->
    <!--  root 根配置  -->
    <root>
        <level value="${log.level}"/>
        <appender-ref ref="console"/>
    </root>

    <!--
        自定义logger additivity表示是否从 rootLogger继承配置
        false 不继承根配置 该com.zh包下以此配置为准
     -->
    <logger name="com.zh" level="INFO" additivity="false">
        <!--   console 只向控制台输出    -->
        <appender-ref ref="console"/>
        <appender-ref ref="rollFile"/>
    </logger>

</configuration>